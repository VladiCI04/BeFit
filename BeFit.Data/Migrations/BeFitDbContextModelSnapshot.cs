// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

#nullable disable

namespace BeFit.Data.Migrations
{
    [DbContext(typeof(BeFitDbContext))]
    partial class BeFitDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BeFit.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasDefaultValue("Test");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasDefaultValue("Test");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("40ab26f0-ce65-4276-8bf9-4ce80bbf256a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "318a8581-71c6-4bc4-8d8f-61459e946cc5",
                            Email = "quan@user.com",
                            EmailConfirmed = true,
                            FirstName = "Quan",
                            LastName = "Rodriguez",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUAN@USER.COM",
                            NormalizedUserName = "QUAN@USER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK/RAYa6evbIhLVitkLGMG1dwASATbFzp2kLlzikIG0ecKbN9ToCnrmcHoltGDWq6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4836823-07e9-4cd3-aad7-654992ef7c28",
                            TwoFactorEnabled = false,
                            UserName = "quan@user.com"
                        },
                        new
                        {
                            Id = new Guid("283c422e-8e6e-450b-818e-65d8d4c9426c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d9bb0dd-fd77-4410-b59e-88752db70867",
                            Email = "bentley@user.com",
                            EmailConfirmed = true,
                            FirstName = "Bentley",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENTLEY@USER.COM",
                            NormalizedUserName = "BENTLEY@USER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK/RAYa6evbIhLVitkLGMG1dwASATbFzp2kLlzikIG0ecKbN9ToCnrmcHoltGDWq6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86002846-7ecb-4034-9dce-963e10002c88",
                            TwoFactorEnabled = false,
                            UserName = "bentley@user.com"
                        },
                        new
                        {
                            Id = new Guid("7ca25b19-34e1-4b20-b3e9-aa98e43bf574"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc6ca61d-0372-491f-b8f2-b50404aaf552",
                            Email = "lenlen@user.com",
                            EmailConfirmed = true,
                            FirstName = "Leonardo",
                            LastName = "Dicaprio",
                            LockoutEnabled = false,
                            NormalizedEmail = "LENLEN@USER.COM",
                            NormalizedUserName = "LENLEN@USER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK/RAYa6evbIhLVitkLGMG1dwASATbFzp2kLlzikIG0ecKbN9ToCnrmcHoltGDWq6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41018a16-6966-449c-8616-3850c774c020",
                            TwoFactorEnabled = false,
                            UserName = "lenlen@user.com"
                        },
                        new
                        {
                            Id = new Guid("0a7141a1-62c8-4a1f-9225-1d77f76412d1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3126e7a6-a4cc-4433-b6ce-1e52f6aa47ea",
                            Email = "sami@coach.com",
                            EmailConfirmed = true,
                            FirstName = "Sami",
                            LastName = "Hosni",
                            LockoutEnabled = false,
                            NormalizedEmail = "SAMI@COACH.COM",
                            NormalizedUserName = "SAMI@COACH.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK/RAYa6evbIhLVitkLGMG1dwASATbFzp2kLlzikIG0ecKbN9ToCnrmcHoltGDWq6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5738f4e-c5bd-44b2-9234-87aba4891a52",
                            TwoFactorEnabled = false,
                            UserName = "sami@coach.com"
                        },
                        new
                        {
                            Id = new Guid("f4f678ce-62d4-4dde-97cf-e1de3f4e7482"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47aa19c2-5c5c-4030-80f5-23bc42c92dce",
                            Email = "lenyg@coach.com",
                            EmailConfirmed = true,
                            FirstName = "Elena",
                            LastName = "Georgieva",
                            LockoutEnabled = false,
                            NormalizedEmail = "LENYG@COACH.COM",
                            NormalizedUserName = "LENYG@COACH.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK/RAYa6evbIhLVitkLGMG1dwASATbFzp2kLlzikIG0ecKbN9ToCnrmcHoltGDWq6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6823fac7-e949-454c-9186-526180a38e4a",
                            TwoFactorEnabled = false,
                            UserName = "lenyg@coach.com"
                        },
                        new
                        {
                            Id = new Guid("0bee301e-6e95-41ae-aa91-e8dc87112eea"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "504b4b8e-770e-4cfc-a695-cac16a690499",
                            Email = "admin@befit.bg",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@BEFIT.BG",
                            NormalizedUserName = "ADMIN@BEFIT.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAENYCtM+6ooSEgeKWIB1Mi7rGJvbpqlgVFsxi/u+PIv3r1Fqg4PpJRdnieyo+UZzm4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c8597c2-c491-4c71-8895-ca8ff5f6d25d",
                            TwoFactorEnabled = false,
                            UserName = "admin@befit.bg"
                        });
                });

            modelBuilder.Entity("BeFit.Data.Models.Coach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("CoachCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CoachCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Coaches");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66f0823e-09a4-4858-8f47-a8e096c859b9"),
                            Age = 21,
                            CoachCategoryId = 5,
                            Description = "Very serious and hardworking coach!",
                            Gender = "Female",
                            Height = 1.6499999999999999,
                            PhoneNumber = "0886810542",
                            UserId = new Guid("f4f678ce-62d4-4dde-97cf-e1de3f4e7482"),
                            Weight = 61.0
                        },
                        new
                        {
                            Id = new Guid("b2d36361-646f-496a-a5a7-26b9ed2a1a33"),
                            Age = 27,
                            CoachCategoryId = 2,
                            Description = "Very serious and hardworking coach!",
                            Gender = "Male",
                            Height = 1.8999999999999999,
                            PhoneNumber = "0886810378",
                            UserId = new Guid("0a7141a1-62c8-4a1f-9225-1d77f76412d1"),
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("48d78e23-9007-4871-8d89-b8acb2c7e2e8"),
                            Age = 30,
                            CoachCategoryId = 5,
                            Description = "Admin admin admin",
                            Gender = "Other",
                            Height = 1.8,
                            PhoneNumber = "0886810123",
                            UserId = new Guid("0bee301e-6e95-41ae-aa91-e8dc87112eea"),
                            Weight = 85.0
                        });
                });

            modelBuilder.Entity("BeFit.Data.Models.CoachCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("CoachCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fitness trainer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Lifestyle coach"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sports coach"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Personal trainer"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Athletic trainer"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Wellness specialist"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Health coach"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Exercise specialist"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Bodybuilding coach"
                        });
                });

            modelBuilder.Entity("BeFit.Data.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CoachId");

                    b.HasIndex("EventCategoryId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("73482205-eb8f-49a8-b622-1127f292c3ec"),
                            Address = "Ivan Vazov 51",
                            CoachId = new Guid("48d78e23-9007-4871-8d89-b8acb2c7e2e8"),
                            CreatedOn = new DateTime(2023, 8, 6, 1, 6, 22, 330, DateTimeKind.Unspecified),
                            Description = "Best rugby event ever!",
                            End = new DateTime(2026, 8, 17, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            EventCategoryId = 1,
                            ImageUrl = "https://www.barnstaplerugby.co.uk/wp-content/uploads/2021/10/chiefs-v-westcliff101.jpg",
                            IsActive = true,
                            Start = new DateTime(2023, 8, 6, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            Tax = 40.0,
                            Title = "Rugby"
                        },
                        new
                        {
                            Id = new Guid("c51963d9-8074-423f-bcc6-15b60a35cecf"),
                            Address = "Hristo Botev 15",
                            CoachId = new Guid("66f0823e-09a4-4858-8f47-a8e096c859b9"),
                            CreatedOn = new DateTime(2023, 8, 6, 1, 6, 22, 330, DateTimeKind.Unspecified),
                            Description = "Best athletics event ever!",
                            End = new DateTime(2027, 8, 17, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            EventCategoryId = 1,
                            ImageUrl = "https://images.unsplash.com/photo-1532444458054-01a7dd3e9fca?q=80&w=1000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8YXRobGV0aWN8ZW58MHx8MHx8fDA%3D",
                            IsActive = true,
                            Start = new DateTime(2023, 8, 6, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            Tax = 15.5,
                            Title = "Athletics"
                        },
                        new
                        {
                            Id = new Guid("e2c4742f-7b1b-4e43-b574-af3fca09697c"),
                            Address = "Hristo Smirnenski 63",
                            CoachId = new Guid("b2d36361-646f-496a-a5a7-26b9ed2a1a33"),
                            CreatedOn = new DateTime(2023, 8, 6, 1, 6, 22, 330, DateTimeKind.Unspecified),
                            Description = "Best chess event ever!",
                            End = new DateTime(2025, 8, 17, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            EventCategoryId = 2,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/ChessSet.jpg/800px-ChessSet.jpg",
                            IsActive = true,
                            Start = new DateTime(2023, 8, 6, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            Tax = 31.199999999999999,
                            Title = "Chess"
                        },
                        new
                        {
                            Id = new Guid("127cb9cf-490d-4baa-834a-f0bb5f9304f9"),
                            Address = "Kokiche 21",
                            CoachId = new Guid("b2d36361-646f-496a-a5a7-26b9ed2a1a33"),
                            CreatedOn = new DateTime(2023, 8, 6, 1, 6, 22, 330, DateTimeKind.Unspecified),
                            Description = "Best board game event ever!",
                            End = new DateTime(2030, 8, 17, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            EventCategoryId = 2,
                            ImageUrl = "https://perfectescaperoom.com/wp-content/uploads/2020/09/Untitled-design-62.png",
                            IsActive = true,
                            Start = new DateTime(2023, 8, 6, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            Tax = 28.300000000000001,
                            Title = "Board game"
                        },
                        new
                        {
                            Id = new Guid("08cd5700-99cb-4843-b5c4-f70df2ca4deb"),
                            Address = "Vasil Levski 118",
                            CoachId = new Guid("b2d36361-646f-496a-a5a7-26b9ed2a1a33"),
                            CreatedOn = new DateTime(2023, 8, 6, 1, 6, 22, 330, DateTimeKind.Unspecified),
                            Description = "Best car racing event ever!",
                            End = new DateTime(2028, 8, 17, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            EventCategoryId = 3,
                            ImageUrl = "https://di-uploads-pod23.dealerinspire.com/lexusoflasvegas/uploads/2021/08/Lexus-Racing-Lime-Rock.jpg",
                            IsActive = true,
                            Start = new DateTime(2023, 8, 6, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            Tax = 50.0,
                            Title = "Car racing"
                        },
                        new
                        {
                            Id = new Guid("3a2c6e63-e82f-4fc9-94da-9309d90b2578"),
                            Address = "Stoyan Zaimov 35",
                            CoachId = new Guid("66f0823e-09a4-4858-8f47-a8e096c859b9"),
                            CreatedOn = new DateTime(2023, 8, 6, 1, 6, 22, 330, DateTimeKind.Unspecified),
                            Description = "Best powerboating event ever!",
                            End = new DateTime(2029, 8, 17, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            EventCategoryId = 3,
                            ImageUrl = "https://i0.wp.com/397566-www.web.tornado-node.net/wp-content/uploads/2021/11/RAF1074-scaled.jpg?resize=1080%2C720&ssl=1",
                            IsActive = true,
                            Start = new DateTime(2023, 8, 6, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            Tax = 45.600000000000001,
                            Title = "Powerboating"
                        },
                        new
                        {
                            Id = new Guid("110e4a17-9885-457b-b755-6bfcf69ccc17"),
                            Address = "Geo Milev 100",
                            CoachId = new Guid("66f0823e-09a4-4858-8f47-a8e096c859b9"),
                            CreatedOn = new DateTime(2023, 8, 6, 1, 6, 22, 330, DateTimeKind.Unspecified),
                            Description = "Best billiards event ever!",
                            End = new DateTime(2031, 8, 17, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            EventCategoryId = 4,
                            ImageUrl = "https://i.ebayimg.com/images/g/B6QAAOSwTLBjBSwy/s-l1200.jpg",
                            IsActive = true,
                            Start = new DateTime(2023, 8, 6, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            Tax = 15.199999999999999,
                            Title = "Billiards"
                        },
                        new
                        {
                            Id = new Guid("d2aaedfe-e4b4-4897-ba75-4cef430b8b93"),
                            Address = "Petko Karavelov 16",
                            CoachId = new Guid("66f0823e-09a4-4858-8f47-a8e096c859b9"),
                            CreatedOn = new DateTime(2023, 8, 6, 1, 6, 22, 330, DateTimeKind.Unspecified),
                            Description = "Best tennis event ever!",
                            End = new DateTime(2028, 8, 17, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            EventCategoryId = 4,
                            ImageUrl = "https://tennisalberta.com/wp-content/uploads/2021/11/Presentation-Lifestyle_Penn.jpg",
                            IsActive = true,
                            Start = new DateTime(2023, 8, 6, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            Tax = 29.5,
                            Title = "Tennis"
                        },
                        new
                        {
                            Id = new Guid("686e191d-946a-4542-ae8f-b9c82c59b054"),
                            Address = "Ivan Milev 1",
                            CoachId = new Guid("b2d36361-646f-496a-a5a7-26b9ed2a1a33"),
                            CreatedOn = new DateTime(2023, 8, 6, 1, 6, 22, 330, DateTimeKind.Unspecified),
                            Description = "Best equestrian event ever!",
                            End = new DateTime(2027, 8, 17, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            EventCategoryId = 5,
                            ImageUrl = "https://www.cavalletti.com.au/wp-content/uploads/2022/11/FB_IMG_1667257848544.jpg",
                            IsActive = true,
                            Start = new DateTime(2023, 8, 6, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            Tax = 22.300000000000001,
                            Title = "Equestrian"
                        },
                        new
                        {
                            Id = new Guid("a166347c-7050-468a-b046-0bbc681d74ae"),
                            Address = "Petko Ivanov 18",
                            CoachId = new Guid("b2d36361-646f-496a-a5a7-26b9ed2a1a33"),
                            CreatedOn = new DateTime(2023, 8, 6, 1, 6, 22, 330, DateTimeKind.Unspecified),
                            Description = "Best rodeo event ever!",
                            End = new DateTime(2026, 8, 17, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            EventCategoryId = 5,
                            ImageUrl = "https://www.rubysinn.com/wp-content/uploads/2014/11/things-to-do-in-bryce-canyon-rodeo.jpg",
                            IsActive = true,
                            Start = new DateTime(2023, 8, 6, 1, 6, 0, 0, DateTimeKind.Unspecified),
                            Tax = 35.75,
                            Title = "Rodeo"
                        });
                });

            modelBuilder.Entity("BeFit.Data.Models.EventCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("EventCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Physical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mind"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Motorized"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Coordination"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Animal-supported"
                        });
                });

            modelBuilder.Entity("BeFit.Data.Models.EventClient", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventClients");

                    b.HasData(
                        new
                        {
                            ClientId = new Guid("40ab26f0-ce65-4276-8bf9-4ce80bbf256a"),
                            EventId = new Guid("e2c4742f-7b1b-4e43-b574-af3fca09697c")
                        },
                        new
                        {
                            ClientId = new Guid("283c422e-8e6e-450b-818e-65d8d4c9426c"),
                            EventId = new Guid("e2c4742f-7b1b-4e43-b574-af3fca09697c")
                        },
                        new
                        {
                            ClientId = new Guid("7ca25b19-34e1-4b20-b3e9-aa98e43bf574"),
                            EventId = new Guid("a166347c-7050-468a-b046-0bbc681d74ae")
                        },
                        new
                        {
                            ClientId = new Guid("7ca25b19-34e1-4b20-b3e9-aa98e43bf574"),
                            EventId = new Guid("110e4a17-9885-457b-b755-6bfcf69ccc17")
                        },
                        new
                        {
                            ClientId = new Guid("0bee301e-6e95-41ae-aa91-e8dc87112eea"),
                            EventId = new Guid("e2c4742f-7b1b-4e43-b574-af3fca09697c")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BeFit.Data.Models.Coach", b =>
                {
                    b.HasOne("BeFit.Data.Models.CoachCategory", "CoachCategory")
                        .WithMany("Coaches")
                        .HasForeignKey("CoachCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeFit.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoachCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeFit.Data.Models.Event", b =>
                {
                    b.HasOne("BeFit.Data.Models.ApplicationUser", null)
                        .WithMany("Events")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("BeFit.Data.Models.Coach", "Coach")
                        .WithMany("Events")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeFit.Data.Models.EventCategory", "EventCategory")
                        .WithMany("Events")
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("EventCategory");
                });

            modelBuilder.Entity("BeFit.Data.Models.EventClient", b =>
                {
                    b.HasOne("BeFit.Data.Models.ApplicationUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeFit.Data.Models.Event", "Event")
                        .WithMany("EventClients")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BeFit.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BeFit.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeFit.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BeFit.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeFit.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("BeFit.Data.Models.Coach", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("BeFit.Data.Models.CoachCategory", b =>
                {
                    b.Navigation("Coaches");
                });

            modelBuilder.Entity("BeFit.Data.Models.Event", b =>
                {
                    b.Navigation("EventClients");
                });

            modelBuilder.Entity("BeFit.Data.Models.EventCategory", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
